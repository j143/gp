#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------


/*
 * Inference Methods
 */

source("model_selection/mean.dml") as mean
source("model_selection/gpc.dml") as gpc

# Exact inference for a Gaussian Process with Gaussian Likelihood

GaussInference = function(matrix[double] mean, matrix[double] covariance,
  matrix[double] likelihood, matrix[double] X, matrix[double] y)
  return(matrix[double] posterior, matrix[double] nlmlh, matrix[double] dnllh) {

  /*
   * INPUTS:
   * -  mean: mean value of the hyperparameters
   * -  covariance: covariance value of hyperparameters
   * -  likelihood: likelihood function value
   * -  X: Input matrix
   * -  y: target vector corresponding to input matrix
   *
   * OUTPUTS:
   * -  posterior: posterior
   * -  nllh: negative log likelihood
   * -  dnllh: derivative of negative log likelihood
   *
   */

   # 1. Evaluate mean vector and derivative
   [m, dm] = mean::mean(mean(theta), X);

   # 2. Noise variance of Gaussian Likelihood
   noise_s2 = exp(2 * likelihood(theta)); # noise variance
   W = matrix(1, rows=nrows(X), cols=1) / noise_s2 ;

   # 3. Negative log marginal likelihood - this can be obtained from gpc or gpr
   # nlmlh = t(y - m);

   # 4. Derivative of negative log marginal likelihood
   # dnlmlh will have mean & likelihood
   # dnlmlh -> mean       -> matrix(0, rows=0, cols=1)
   # dnlmlh -> likelihood -> -noise_s2 * (alpha' * alpha) - 2 * sum(dW)/noise_s2 + nrows(X);

   [nlmlh, dnlmlh] = gpc::gpc(X, y, theta, lh);


}